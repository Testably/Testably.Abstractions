name: "Release"

on:
  push:
    branches:
      - 'release/v[0-9]+.[0-9]+.[0-9]+'

jobs:
  analyze:
    name: Static code analysis
    runs-on: windows-latest
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Tag current commit
        shell: bash
        run: |
          version="${GITHUB_REF#refs/heads/release/}"
          git tag "${version}"
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          dotnet tool install minver-cli --global
          dotnet tool restore
          $version = minver -t v
          $productVersion,$prerelease = $version -split '-',2
          echo "Detected product version: $productVersion"
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"Testably_Testably.Abstractions" /o:"testably" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /v:"$productVersion" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet tool install --global dotnet-coverage
          dotnet restore -s 'nuget.config'
          dotnet build --no-incremental /p:NetCoreOnly=True --configuration "Release"
          dotnet-coverage collect 'dotnet test --no-build' -f xml  -o 'coverage.xml' -s '.github\coverage-settings.xml'
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  test-macos:
    name: Test (MacOS)
    runs-on: macos-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with:
          fetch-depth: 0
      - name: Tag current commit
        shell: bash
        run: |
          version="${GITHUB_REF#refs/heads/release/}"
          git tag "${version}"
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      - name: Build solution
        run: dotnet build /p:NetCoreOnly=True --configuration "Release"
      - name: Run tests
        uses: Wandalen/wretry.action@v1.3.0
        with:
          command: dotnet test --no-build
          attempt_limit: 2

  test-ubuntu:
    name: Test (Ubuntu)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with:
          fetch-depth: 0
      - name: Tag current commit
        shell: bash
        run: |
          version="${GITHUB_REF#refs/heads/release/}"
          git tag "${version}"
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      - name: Build solution
        run: dotnet build /p:NetCoreOnly=True --configuration "Release"
      - name: Run tests
        uses: Wandalen/wretry.action@v1.3.0
        with:
          command: dotnet test --no-build
          attempt_limit: 2

  test-windows:
    name: Test (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with:
          fetch-depth: 0
      - name: Tag current commit
        shell: bash
        run: |
          version="${GITHUB_REF#refs/heads/release/}"
          git tag "${version}"
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      - name: Build solution
        run: dotnet build /p:NetCoreOnly=True --configuration "Release"
      - name: Run tests
        uses: Wandalen/wretry.action@v1.3.0
        with:
          command: dotnet test --no-build
          attempt_limit: 2

  test-net-framework:
    name: Test (.NET Framework)
    runs-on: windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with:
          fetch-depth: 0
      - name: Tag current commit
        shell: bash
        run: |
          version="${GITHUB_REF#refs/heads/release/}"
          git tag "${version}"
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
      - name: Setup VSTest
        uses: darenm/Setup-VSTest@v1
      - name: Navigate to Workspace
        run: cd $GITHUB_WORKSPACE
      - name: Build solution
        run: msbuild.exe Testably.Abstractions.sln /p:NetFrameworkOnly=True /p:platform="Any CPU" /p:configuration="Release" -t:restore,build -p:RestorePackagesConfig=true
      - name: Run tests
        run: vstest.console.exe .\Build\Tests\Testably.Abstractions.Tests\net48\Testably.Abstractions.Tests.dll .\Build\Tests\Testably.Abstractions.Parity.Tests\net48\Testably.Abstractions.Parity.Tests.dll .\Build\Tests\Testably.Abstractions.Testing.Tests\net48\Testably.Abstractions.Testing.Tests.dll

  test-examples:
    name: Test (Examples)
    runs-on: windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with:
          fetch-depth: 0
      - name: Tag current commit
        shell: bash
        run: |
          version="${GITHUB_REF#refs/heads/release/}"
          git tag "${version}"
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      - name: Build solution
        run: dotnet build /p:NetCoreOnly=True
      - name: Build example solution
        run: dotnet build Examples /p:UseFileReferenceToTestablyLibraries=True --configuration "Release"
      - name: Run example tests
        uses: Wandalen/wretry.action@v1.3.0
        with:
          command: dotnet test Examples --no-build
          attempt_limit: 2

  stryker-ubuntu:
    name: Analyze quality of unit test coverage with .NET Stryker (Ubuntu)
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - name: Checkout sources
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      - name: Install .NET Stryker
        shell: bash
        run: |
          dotnet tool install dotnet-stryker --tool-path ../tools --version 3.7.1
      - name: Analyze Testably.Abstractions.Testing
        env:
          STRYKER_DASHBOARD_API_KEY: ${{ secrets.STRYKER_DASHBOARD_API_KEY }}
        shell: bash
        run: |
          cd Tests
          ../../tools/dotnet-stryker -f ../.github/stryker/Stryker.Config.Testing.json -v "${GITHUB_REF#refs/heads/}" -r "Dashboard" -r "cleartext"

  stryker-windows:
    name: Analyze quality of unit test coverage with .NET Stryker (Windows)
    runs-on: windows-latest
    timeout-minutes: 300
    steps:
      - name: Checkout sources
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      - name: Install .NET Stryker
        shell: bash
        run: |
          dotnet tool install dotnet-stryker --tool-path ../tools --version 3.7.1
      - name: Analyze Testably.Abstractions
        env:
          STRYKER_DASHBOARD_API_KEY: ${{ secrets.STRYKER_DASHBOARD_API_KEY }}
        shell: bash
        run: |
          cd Tests
          ../../tools/dotnet-stryker -f ../.github/stryker/Stryker.Config.json -v "${GITHUB_REF#refs/heads/}" -r "Dashboard" -r "cleartext"
      - name: Analyze Testably.Abstractions.AccessControl
        env:
          STRYKER_DASHBOARD_API_KEY: ${{ secrets.STRYKER_DASHBOARD_API_KEY }}
        shell: bash
        run: |
          cd Tests
          ../../tools/dotnet-stryker -f ../.github/stryker/Stryker.Config.AccessControl.json -v "${GITHUB_REF#refs/heads/}" -r "Dashboard" -r "cleartext"
      - name: Analyze Testably.Abstractions.Compression
        env:
          STRYKER_DASHBOARD_API_KEY: ${{ secrets.STRYKER_DASHBOARD_API_KEY }}
        shell: bash
        run: |
          cd Tests
          ../../tools/dotnet-stryker -f ../.github/stryker/Stryker.Config.Compression.json -v "${GITHUB_REF#refs/heads/}" -r "Dashboard" -r "cleartext"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: [analyze, test-macos, test-ubuntu, test-windows, test-net-framework, test-examples]
    steps:
      - name: Checkout sources
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with:
          fetch-depth: 0
      - name: Tag current commit
        id: tag
        shell: bash
        run: |
          version="${GITHUB_REF#refs/heads/release/}"
          git tag "${version}"
          git push origin "${version}"
          echo "release_version=${version}" >> "$GITHUB_OUTPUT"
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.2.0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      - name: Prepare README.md
        shell: bash
        run: |
          version="${GITHUB_REF#refs/heads/release/}"
          # Add changelog badge to README.md
          sed -i -e "2 a\[!\[Changelog](https:\/\/img\.shields\.io\/badge\/Changelog-${version}-blue)](https:\/\/github\.com\/Testably\/Testably\.Abstractions\/releases\/tag\/${version})" "./README.md"
          for f in "README.md" "Docs/AccessControl.md" "Docs/Compression.md" "Docs/Interface.md" "Docs/Testing.md"
          do
            echo "Processing $f" # always double quote "$f" filename
            # do something on $f
            # Remove the codacy badge as it is not aligned to the release
            grep -v "Codacy Badge" "./$f" > "./$f.backup" && mv "./$f.backup" "./$f"
            # Change status badges to display explicit version
            sed -i -e "s/branch=main/branch=release%2F${version}/g" "./$f"
            sed -i -e "s/Testably.Abstractions%2Fmain/Testably.Abstractions%2Frelease%2F${version}/g" "./$f"
            sed -i -e "s/Testably.Abstractions%2Fmain/Testably.Abstractions%2Frelease%2F${version}/g" "./$f"
            sed -i -e "s/Testably.Abstractions\/main)/Testably.Abstractions\/release\/${version})/g" "./$f"
            # Add absolute path to example section
            sed -i -e 's/\(Examples\/README.md\)/https:\/\/github.com\/Testably\/Testably.Abstractions\/blob\/main\/Examples\/README.md/g' "./$f"
          done
      - name: Build
        run: dotnet build --configuration "Release"
      - name: Publish
        run: nuget push **\*.nupkg -Source 'https://api.nuget.org/v3/index.json' -ApiKey ${{secrets.NUGET_API_KEY}}
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.tag.outputs.release_version }}
          tag_name: ${{ steps.tag.outputs.release_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy, stryker-windows, stryker-ubuntu]
    steps:
      - name: Comment relevant issues and pull requests
        uses: apexskier/github-release-commenter@v1.3.2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          comment-template: |
            This is addressed in release {release_link}.
          label-template: |
            state: released
      - name: Checkout sources
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with:
          fetch-depth: 0
      - name: Delete release branch
        shell: bash
        run: |
          version="${GITHUB_REF#refs/heads/release/}"
          git push origin -d "refs/heads/release/${version}"
