using NSubstitute.ExceptionExtensions;
using System.IO;

namespace Testably.Abstractions.Tests.FileSystem.File;

[FileSystemTests]
public partial class OpenTests
{
	[Theory]
	[AutoData]
	public async Task Open_ExistingFileWithCreateNewMode_ShouldThrowIOException(
		string path)
	{
		FileSystem.File.WriteAllText(path, null);

		void Act()
		{
			_ = FileSystem.File.Open(path, FileMode.CreateNew);
		}

		await That(Act).Throws<IOException>()
			.WithMessageContaining($"'{FileSystem.Path.GetFullPath(path)}'").And
			.WithHResult(Test.RunsOnWindows ? -2147024816 : 17);
	}

	[Theory]
	[AutoData]
	public async Task Open_MissingFileAndIncorrectMode_ShouldThrowFileNotFoundException(
		string path)
	{
		void Act()
		{
			_ = FileSystem.File.Open(path, FileMode.Open);
		}

		await That(Act).Throws<FileNotFoundException>()
			.WithMessageContaining($"'{FileSystem.Path.GetFullPath(path)}'").And
			.WithHResult(-2147024894);
	}

	[Theory]
	[InlineAutoData(FileMode.Open, FileAccess.Read)]
	[InlineAutoData(FileMode.OpenOrCreate, FileAccess.ReadWrite)]
	public async Task Open_ShouldNotAdjustTimes(FileMode mode, FileAccess access, string path)
	{
		SkipIfLongRunningTestsShouldBeSkipped();

		DateTime creationTimeStart = TimeSystem.DateTime.UtcNow;
		FileSystem.File.WriteAllText(path, "foo");
		DateTime creationTimeEnd = TimeSystem.DateTime.UtcNow;
		TimeSystem.Thread.Sleep(FileTestHelper.AdjustTimesDelay);

		FileSystemStream stream = FileSystem.File.Open(path, mode, access);
		stream.Dispose();

		DateTime creationTime = FileSystem.File.GetCreationTimeUtc(path);
		DateTime lastAccessTime = FileSystem.File.GetLastAccessTimeUtc(path);
		DateTime lastWriteTime = FileSystem.File.GetLastWriteTimeUtc(path);

		await That(creationTime).IsBetween(creationTimeStart).And(creationTimeEnd).Within(TimeComparison.Tolerance);
		await That(lastAccessTime).IsBetween(creationTimeStart).And(creationTimeEnd).Within(TimeComparison.Tolerance);
		await That(lastWriteTime).IsBetween(creationTimeStart).And(creationTimeEnd).Within(TimeComparison.Tolerance);
	}

	[Theory]
	[InlineAutoData(FileMode.Append, FileAccess.Write)]
	[InlineAutoData(FileMode.Open, FileAccess.ReadWrite)]
	[InlineAutoData(FileMode.Create, FileAccess.ReadWrite)]
	public async Task Open_ShouldUseExpectedAccessDependingOnMode(
		FileMode mode,
		FileAccess expectedAccess,
		string path)
	{
		FileSystem.File.WriteAllText(path, null);

		using FileSystemStream stream = FileSystem.File.Open(path, mode);

		await That(FileTestHelper.CheckFileAccess(stream)).IsEqualTo(expectedAccess);
		await That(FileTestHelper.CheckFileShare(FileSystem, path)).IsEqualTo(FileShare.None);
	}

	[Theory]
	[InlineAutoData(FileAccess.Read, FileShare.Write)]
	[InlineAutoData(FileAccess.Write, FileShare.Read)]
	public async Task Open_ShouldUseGivenAccessAndShare(string path,
		FileAccess access,
		FileShare share)
	{
		FileSystem.File.WriteAllText(path, null);

		using FileSystemStream stream =
			FileSystem.File.Open(path, FileMode.Open, access, share);

		await That(FileTestHelper.CheckFileAccess(stream)).IsEqualTo(access);
		await That(FileTestHelper.CheckFileShare(FileSystem, path)).IsEqualTo(share);
	}

	[Theory]
	[AutoData]
	public async Task Open_ShouldUseNoneShareAsDefault(string path,
		FileAccess access)
	{
		FileSystem.File.WriteAllText(path, null);

		using FileSystemStream stream = FileSystem.File.Open(path, FileMode.Open, access);

		await That(FileTestHelper.CheckFileAccess(stream)).IsEqualTo(access);
		await That(FileTestHelper.CheckFileShare(FileSystem, path)).IsEqualTo(FileShare.None);
	}

#if FEATURE_FILESYSTEM_STREAM_OPTIONS
	[Theory]
	[InlineAutoData(FileAccess.Read, FileShare.Write)]
	[InlineAutoData(FileAccess.Write, FileShare.Read)]
	public async Task Open_WithFileStreamOptions_ShouldUseGivenAccessAndShare(
		string path,
		FileAccess access,
		FileShare share)
	{
		FileSystem.File.WriteAllText(path, null);
		FileStreamOptions options = new()
		{
			Mode = FileMode.Open,
			Access = access,
			Share = share,
		};

		using FileSystemStream stream = FileSystem.File.Open(path, options);

		await That(FileTestHelper.CheckFileAccess(stream)).IsEqualTo(access);
		await That(FileTestHelper.CheckFileShare(FileSystem, path)).IsEqualTo(share);
	}
#endif
}
