using System.IO;

namespace Testably.Abstractions.Tests.FileSystem.FileInfo;

[FileSystemTests]
public partial class OpenTests
{
#if NETFRAMEWORK
	[Theory]
	[AutoData]
	public void Open_AppendMode_ShouldThrowArgumentException(string path)
	{
		FileSystem.File.WriteAllText(path, null);
		IFileInfo sut = FileSystem.FileInfo.New(path);

		Exception? exception = Record.Exception(() =>
		{
			_ = sut.Open(FileMode.Append);
		});

		exception.Should().BeException<ArgumentException>(hResult: -2147024809);
	}
#endif

#if !NETFRAMEWORK
	[Theory]
	[AutoData]
	public void Open_AppendMode_ShouldOpenExistingFile(
		string path, byte[] bytes)
	{
		FileSystem.File.WriteAllBytes(path, bytes);
		IFileInfo sut = FileSystem.FileInfo.New(path);

		using FileSystemStream stream = sut.Open(FileMode.Append);

		stream.Position.Should().Be(bytes.Length);
		stream.Length.Should().Be(bytes.Length);
	}
#endif

#if !NETFRAMEWORK
	[Theory]
	[AutoData]
	public void Open_AppendMode_SeekShouldThrowIOException_WhenReadingBackward(
		string path, byte[] bytes)
	{
		FileSystem.File.WriteAllBytes(path, bytes);
		IFileInfo sut = FileSystem.FileInfo.New(path);

		using FileSystemStream stream = sut.Open(FileMode.Append);

		stream.CanRead.Should().BeFalse();

		Exception? exception = Record.Exception(() =>
		{
			// ReSharper disable once AccessToDisposedClosure
			stream.Seek(0, SeekOrigin.Begin);
		});

		exception.Should().BeException<IOException>(hResult: -2146232800);
	}
#endif

#if !NETFRAMEWORK
	[Theory]
	[AutoData]
	public void Open_AppendMode_SeekShouldWorkWhenKeepingInNewArea(
		string path, byte[] bytes)
	{
		FileSystem.File.WriteAllBytes(path, bytes);
		IFileInfo sut = FileSystem.FileInfo.New(path);

		using FileSystemStream stream = sut.Open(FileMode.Append);

		stream.WriteByte(0);
		stream.WriteByte(1);

		Exception? exception = Record.Exception(() =>
		{
			// ReSharper disable once AccessToDisposedClosure
			stream.Seek(bytes.Length, SeekOrigin.Begin);
		});

		exception.Should().BeNull();
		stream.Position.Should().Be(bytes.Length);
	}
#endif

#if !NETFRAMEWORK
	[Theory]
	[AutoData]
	public void Open_AppendMode_ReadShouldThrowNotSupportedException(
		string path, byte[] bytes)
	{
		FileSystem.File.WriteAllBytes(path, bytes);
		IFileInfo sut = FileSystem.FileInfo.New(path);

		using FileSystemStream stream = sut.Open(FileMode.Append);

		stream.WriteByte(0);
		stream.WriteByte(1);

		stream.Seek(bytes.Length, SeekOrigin.Begin);

		Exception? exception = Record.Exception(() =>
		{
			// ReSharper disable once AccessToDisposedClosure
			stream.ReadByte();
		});

		exception.Should().BeException<NotSupportedException>(hResult: -2146233067);
	}
#endif

	[Theory]
	[AutoData]
	public void Open_ExistingFileWithCreateNewMode_ShouldThrowIOException(
		string path)
	{
		FileSystem.File.WriteAllText(path, null);
		IFileInfo sut = FileSystem.FileInfo.New(path);

		Exception? exception = Record.Exception(() =>
		{
			_ = sut.Open(FileMode.CreateNew);
		});

		exception.Should().BeException<IOException>($"'{FileSystem.Path.GetFullPath(path)}'",
			hResult: Test.RunsOnWindows ? -2147024816 : 17);
	}

	[Theory]
	[InlineAutoData(FileMode.Open)]
	[InlineAutoData(FileMode.Truncate)]
	public void Open_MissingFileAndIncorrectMode_ShouldThrowFileNotFoundException(
		FileMode mode, string path)
	{
		IFileInfo sut = FileSystem.FileInfo.New(path);

		Exception? exception = Record.Exception(() =>
		{
			_ = sut.Open(mode);
		});

		exception.Should().BeException<FileNotFoundException>(
			$"'{FileSystem.Path.GetFullPath(path)}'",
			hResult: -2147024894);
	}

	[Theory]
#if !NETFRAMEWORK
	[InlineAutoData(FileMode.Append)]
#endif
	[InlineAutoData(FileMode.Create)]
	[InlineAutoData(FileMode.CreateNew)]
	[InlineAutoData(FileMode.OpenOrCreate)]
	public void Open_MissingFileAndCorrectMode_ShouldCreateFile(
		FileMode mode, string path)
	{
		IFileInfo sut = FileSystem.FileInfo.New(path);

		Exception? exception = Record.Exception(() =>
		{
			_ = sut.Open(mode);
		});

		exception.Should().BeNull();
		sut.Exists.Should().BeTrue();
		FileSystem.File.Exists(path).Should().BeTrue();
	}

	[Theory]
	[AutoData]
	public void Open_ShouldOpenWithReadAndWriteAccess(
		string path)
	{
		IFileInfo sut = FileSystem.FileInfo.New(path);

		using FileSystemStream stream = sut.Open(FileMode.OpenOrCreate);

		stream.CanRead.Should().BeTrue();
		stream.CanWrite.Should().BeTrue();
	}

	[Theory]
#if !NETFRAMEWORK
	[InlineAutoData(FileMode.Append, FileAccess.Write)]
#endif
	[InlineAutoData(FileMode.Open, FileAccess.ReadWrite)]
	[InlineAutoData(FileMode.Create, FileAccess.ReadWrite)]
	public void Open_ShouldUseExpectedAccessDependingOnMode(
		FileMode mode,
		FileAccess expectedAccess,
		string path)
	{
		FileSystem.File.WriteAllText(path, null);
		IFileInfo sut = FileSystem.FileInfo.New(path);

		using FileSystemStream stream = sut.Open(mode);

		FileTestHelper.CheckFileAccess(stream).Should().Be(expectedAccess);
		FileTestHelper.CheckFileShare(FileSystem, path).Should().Be(FileShare.None);
	}

	[Theory]
	[InlineAutoData(FileAccess.Read, FileShare.Write)]
	[InlineAutoData(FileAccess.Write, FileShare.Read)]
	public void Open_ShouldUseGivenAccessAndShare(string path,
		FileAccess access,
		FileShare share)
	{
		FileSystem.File.WriteAllText(path, null);
		IFileInfo sut = FileSystem.FileInfo.New(path);

		using FileSystemStream stream = sut.Open(FileMode.Open, access, share);

		FileTestHelper.CheckFileAccess(stream).Should().Be(access);
		FileTestHelper.CheckFileShare(FileSystem, path).Should().Be(share);
	}

	[Theory]
	[AutoData]
	public void Open_ShouldUseNoneShareAsDefault(string path,
		FileAccess access)
	{
		FileSystem.File.WriteAllText(path, null);
		IFileInfo sut = FileSystem.FileInfo.New(path);

		using FileSystemStream stream = sut.Open(FileMode.Open, access);

		FileTestHelper.CheckFileAccess(stream).Should().Be(access);
		FileTestHelper.CheckFileShare(FileSystem, path).Should().Be(FileShare.None);
	}

#if FEATURE_FILESYSTEM_STREAM_OPTIONS
	[Theory]
	[InlineAutoData(FileAccess.Read, FileShare.Write)]
	[InlineAutoData(FileAccess.Write, FileShare.Read)]
	public void Open_WithFileStreamOptions_ShouldUseGivenAccessAndShare(
		string path,
		FileAccess access,
		FileShare share)
	{
		FileSystem.File.WriteAllText(path, null);
		IFileInfo sut = FileSystem.FileInfo.New(path);
		FileStreamOptions options = new()
		{
			Mode = FileMode.Open,
			Access = access,
			Share = share,
		};

		using FileSystemStream stream = sut.Open(options);

		FileTestHelper.CheckFileAccess(stream).Should().Be(access);
		FileTestHelper.CheckFileShare(FileSystem, path).Should().Be(share);
	}
#endif
}
