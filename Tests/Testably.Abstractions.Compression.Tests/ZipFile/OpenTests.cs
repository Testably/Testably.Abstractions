using System.IO.Compression;

namespace Testably.Abstractions.Compression.Tests.ZipFile;

// ReSharper disable once PartialTypeWithSinglePart
public abstract partial class OpenTests<TFileSystem>
	: FileSystemTestBase<TFileSystem>
	where TFileSystem : IFileSystem
{
	[SkippableFact]
	public async Task Open_CreateMode_ShouldInitializeEmptyArchive()
	{
		IZipArchive archive = FileSystem.ZipFile().Open("destination.zip", ZipArchiveMode.Create);

		await That(archive.Mode).Should().Be(ZipArchiveMode.Create);
	}

	[SkippableFact]
	public async Task Open_InvalidMode_ShouldThrowArgumentOutOfRangeException()
	{
		ZipArchiveMode invalidMode = (ZipArchiveMode)(-1);

		void Act()
		{
			FileSystem.ZipFile().Open("destination.zip", invalidMode);
		}

		await That(Act).Should().Throw<ArgumentOutOfRangeException>()
			.WithParamName("mode");
	}

	[SkippableTheory]
	[InlineData(ZipArchiveMode.Read)]
	[InlineData(ZipArchiveMode.Update)]
	public async Task Open_ShouldOpenExistingArchive(ZipArchiveMode mode)
	{
		FileSystem.Initialize()
			.WithSubdirectory("foo");
		FileSystem.File.WriteAllText("foo/foo.txt", "FooFooFoo");
		FileSystem.ZipFile()
			.CreateFromDirectory("foo", "destination.zip", CompressionLevel.NoCompression,
				false);

		IZipArchive archive = FileSystem.ZipFile().Open("destination.zip", mode);

		await That(archive.Mode).Should().Be(mode);
		await That(archive.Entries).Should().HaveExactly(1).Items();
	}

	[SkippableFact]
	public async Task OpenRead_ShouldOpenExistingArchiveInReadMode()
	{
		FileSystem.Initialize()
			.WithSubdirectory("foo");
		FileSystem.File.WriteAllText("foo/foo.txt", "FooFooFoo");
		FileSystem.ZipFile()
			.CreateFromDirectory("foo", "destination.zip", CompressionLevel.NoCompression,
				false);

		IZipArchive archive = FileSystem.ZipFile().OpenRead("destination.zip");

		await That(archive.Mode).Should().Be(ZipArchiveMode.Read);
		await That(archive.Entries).Should().HaveExactly(1).Items();
	}
}
