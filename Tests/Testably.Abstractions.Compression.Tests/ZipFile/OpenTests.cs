using System.IO.Compression;

namespace Testably.Abstractions.Compression.Tests.ZipFile;

// ReSharper disable once PartialTypeWithSinglePart
public abstract partial class OpenTests<TFileSystem>
	: FileSystemTestBase<TFileSystem>
	where TFileSystem : IFileSystem
{
	[SkippableTheory]
	[InlineData(ZipArchiveMode.Read)]
	[InlineData(ZipArchiveMode.Update)]
	public void Open_ShouldOpenExistingArchive(ZipArchiveMode mode)
	{
		FileSystem.Initialize()
			.WithSubdirectory("foo");
		FileSystem.File.WriteAllText("foo/foo.txt", "FooFooFoo");
		FileSystem.ZipFile()
			.CreateFromDirectory("foo", "destination.zip", CompressionLevel.NoCompression,
				false);

		IZipArchive archive = FileSystem.ZipFile().Open("destination.zip", mode);

		archive.Mode.Should().Be(mode);
		archive.Entries.Should().HaveCount(1);
	}

	[SkippableFact]
	public void Open_CreateMode_ShouldInitializeEmptyArchive()
	{
		IZipArchive archive = FileSystem.ZipFile().Open("destination.zip", ZipArchiveMode.Create);

		archive.Mode.Should().Be(ZipArchiveMode.Create);
	}

	[SkippableFact]
	public void Open_InvalidMode_ShouldThrowArgumentOutOfRangeException()
	{
		ZipArchiveMode invalidMode = (ZipArchiveMode)(-1);

		Exception? exception = Record.Exception(() =>
		{
			FileSystem.ZipFile().Open("destination.zip", invalidMode);
		});

		exception.Should().BeOfType<ArgumentOutOfRangeException>()
			.Which.ParamName.Should().Be("mode");
	}

	[SkippableFact]
	public void OpenRead_ShouldOpenExistingArchiveInReadMode()
	{
		FileSystem.Initialize()
			.WithSubdirectory("foo");
		FileSystem.File.WriteAllText("foo/foo.txt", "FooFooFoo");
		FileSystem.ZipFile()
			.CreateFromDirectory("foo", "destination.zip", CompressionLevel.NoCompression,
				false);

		IZipArchive archive = FileSystem.ZipFile().OpenRead("destination.zip");

		archive.Mode.Should().Be(ZipArchiveMode.Read);
		archive.Entries.Should().HaveCount(1);
	}
}
