using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Text;

namespace Testably.Abstractions.Tests.SourceGenerator;

[Generator]
public sealed class TestGenerator : ISourceGenerator
{
	private SyntaxReceiver? _receiver;

	#region ISourceGenerator Members

	/// <inheritdoc cref="ISourceGenerator.Execute(GeneratorExecutionContext)" />
	public void Execute(GeneratorExecutionContext context)
	{
		if (_receiver == null)
		{
			return;
		}

		foreach (ClassToGenerate classToGenerate in _receiver.FileSystemTestClasses)
		{
			CreateFileSystemTestClasses(context, classToGenerate);
		}

		foreach (ClassToGenerate classToGenerate in _receiver.RandomSystemTestClasses)
		{
			CreateRandomSystemTestClasses(context, classToGenerate);
		}

		foreach (ClassToGenerate classToGenerate in _receiver.TimeSystemTestClasses)
		{
			CreateTimeSystemTestClasses(context, classToGenerate);
		}
	}

	/// <inheritdoc cref="ISourceGenerator.Initialize(GeneratorInitializationContext)" />
	public void Initialize(GeneratorInitializationContext context)
	{
		_receiver = new SyntaxReceiver();
		context.RegisterForSyntaxNotifications(() => _receiver);
	}

	#endregion

	private static string CreateFileName(ClassToGenerate classToGenerate,
	                                     string fileNamePrefix)
	{
		if (classToGenerate.Namespace.StartsWith(
			"Testably.Abstractions.Tests.FileSystem."))
		{
			int prefixLength = "Testably.Abstractions.Tests.FileSystem.".Length;
			return
				$"{fileNamePrefix}{classToGenerate.Namespace.Substring(prefixLength)}.{classToGenerate.Name}.cs";
		}

		return $"{fileNamePrefix}{classToGenerate.Name}.cs";
	}

	private static void CreateFileSystemTestClasses(GeneratorExecutionContext context,
	                                                ClassToGenerate classToGenerate)
	{
		StringBuilder? sourceBuilder = new(
			@$"//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by ""Testably.Abstractions.Tests.SourceGenerator"".
// 
//   Changes to this file may cause incorrect behavior
//   and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Testably.Abstractions.Testing.FileSystemInitializer;
using Testably.Abstractions.Tests.TestHelpers;
using Xunit.Abstractions;

namespace {classToGenerate.Namespace}
{{
	public abstract partial class {classToGenerate.Name}<TFileSystem>
	{{
		protected {classToGenerate.Name}(TFileSystem fileSystem, ITimeSystem timeSystem)
			: base(fileSystem, timeSystem)
		{{
		}}
	}}
}}

namespace {classToGenerate.Namespace}.{classToGenerate.Name}
{{
	// ReSharper disable once UnusedMember.Global
	public sealed class MockFileSystemTests : {classToGenerate.Name}<MockFileSystem>
	{{
		/// <inheritdoc cref=""{classToGenerate.Name}{{TFileSystem}}.BasePath"" />
		public override string BasePath => _directoryCleaner.BasePath;

		private readonly IDirectoryCleaner _directoryCleaner;

		public MockFileSystemTests() : this(new MockFileSystem())
		{{
		}}

		private MockFileSystemTests(MockFileSystem mockFileSystem) : base(
			mockFileSystem,
			mockFileSystem.TimeSystem)
		{{
			_directoryCleaner = FileSystem
			   .SetCurrentDirectoryToEmptyTemporaryDirectory();
		}}

		/// <inheritdoc cref=""IDisposable.Dispose()"" />
		public void Dispose()
			=> _directoryCleaner.Dispose();
	}}
}}

#if !DEBUG || !DISABLE_TESTS_REALFILESYSTEM

namespace {classToGenerate.Namespace}.{classToGenerate.Name}
{{
	// ReSharper disable once UnusedMember.Global
	[Collection(nameof(RealFileSystemTests))]
	public sealed class RealFileSystemTests : {classToGenerate.Name}<RealFileSystem>
	{{
		/// <inheritdoc cref=""{classToGenerate.Name}{{TFileSystem}}.BasePath"" />
		public override string BasePath => _directoryCleaner.BasePath;

		private readonly IDirectoryCleaner _directoryCleaner;

		public RealFileSystemTests(ITestOutputHelper testOutputHelper)
			: base(new RealFileSystem(), new RealTimeSystem())
		{{
			_directoryCleaner = FileSystem
			   .SetCurrentDirectoryToEmptyTemporaryDirectory(testOutputHelper.WriteLine);
		}}

		/// <inheritdoc cref=""IDisposable.Dispose()"" />
		public void Dispose()
			=> _directoryCleaner.Dispose();
	}}
}}
#endif");
		string? fileName = CreateFileName(classToGenerate, "FileSystem.");
		context.AddSource(fileName,
			SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
	}

	private static void CreateRandomSystemTestClasses(GeneratorExecutionContext context,
	                                                  ClassToGenerate classToGenerate)
	{
		StringBuilder? sourceBuilder = new(
			@$"//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by ""Testably.Abstractions.Tests.SourceGenerator"".
// 
//   Changes to this file may cause incorrect behavior
//   and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Testably.Abstractions.Tests.TestHelpers;
using Xunit.Abstractions;

namespace {classToGenerate.Namespace}
{{
	public abstract partial class {classToGenerate.Name}<TRandomSystem>
	{{
		protected {classToGenerate.Name}(TRandomSystem randomSystem)
			: base(randomSystem)
		{{
		}}
	}}
}}

namespace {classToGenerate.Namespace}.{classToGenerate.Name}
{{
	// ReSharper disable once UnusedMember.Global
	public sealed class MockRandomSystemTests : {classToGenerate.Name}<MockRandomSystem>
	{{
		public MockRandomSystemTests() : base(new MockRandomSystem())
		{{
		}}
	}}

	// ReSharper disable once UnusedMember.Global
	public sealed class RealRandomSystemTests : {classToGenerate.Name}<RealRandomSystem>
	{{
		public RealRandomSystemTests() : base(new RealRandomSystem())
		{{
		}}
	}}
}}");
		string? fileName = CreateFileName(classToGenerate, "RandomSystem.");
		context.AddSource(fileName,
			SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
	}

	private static void CreateTimeSystemTestClasses(GeneratorExecutionContext context,
	                                                ClassToGenerate classToGenerate)
	{
		StringBuilder? sourceBuilder = new(
			@$"//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by ""Testably.Abstractions.Tests.SourceGenerator"".
// 
//   Changes to this file may cause incorrect behavior
//   and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Testably.Abstractions.Tests.TestHelpers;
using Xunit.Abstractions;

namespace {classToGenerate.Namespace}
{{
	public abstract partial class {classToGenerate.Name}<TTimeSystem>
	{{
		protected {classToGenerate.Name}(TTimeSystem timeSystem)
			: base(timeSystem)
		{{
		}}
	}}
}}

namespace {classToGenerate.Namespace}.{classToGenerate.Name}
{{
	// ReSharper disable once UnusedMember.Global
	public sealed class MockTimeSystemTests : {classToGenerate.Name}<MockTimeSystem>
	{{
		public MockTimeSystemTests() : base(new MockTimeSystem())
		{{
		}}
	}}

	// ReSharper disable once UnusedMember.Global
	public sealed class RealTimeSystemTests : {classToGenerate.Name}<RealTimeSystem>
	{{
		public RealTimeSystemTests() : base(new RealTimeSystem())
		{{
		}}
	}}
}}");
		string? fileName = CreateFileName(classToGenerate, "TimeSystem.");
		context.AddSource(fileName,
			SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
	}

	private sealed class SyntaxReceiver : ISyntaxReceiver
	{
		/// <summary>
		///     The marker of the base class to trigger generation of files for FileSystem tests.
		/// </summary>
		private const string FileSystemTestMarker = "FileSystemTestBase<TFileSystem>";

		/// <summary>
		///     The marker of the base class to trigger generation of files for RandomSystem tests.
		/// </summary>
		private const string RandomSystemTestMarker =
			"RandomSystemTestBase<TRandomSystem>";

		/// <summary>
		///     The marker of the base class to trigger generation of files for TimeSystem tests.
		/// </summary>
		private const string TimeSystemTestMarker = "TimeSystemTestBase<TTimeSystem>";

		public readonly List<ClassToGenerate> FileSystemTestClasses = new();
		public readonly List<ClassToGenerate> RandomSystemTestClasses = new();
		public readonly List<ClassToGenerate> TimeSystemTestClasses = new();

		#region ISyntaxReceiver Members

		/// <inheritdoc cref="ISyntaxReceiver.OnVisitSyntaxNode(SyntaxNode)" />
		public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
		{
			if (syntaxNode is ClassDeclarationSyntax classDeclarationSyntax)
			{
				BaseTypeSyntax? baseType =
					classDeclarationSyntax.BaseList?.Types.FirstOrDefault();
				ClassToGenerate classToGenerate;
				switch (baseType?.ToString())
				{
					case FileSystemTestMarker:
						classToGenerate = ClassToGenerate
						   .FromClassDeclarationSyntax(classDeclarationSyntax);
						FileSystemTestClasses.Add(classToGenerate);
						break;
					case RandomSystemTestMarker:
						classToGenerate = ClassToGenerate
						   .FromClassDeclarationSyntax(classDeclarationSyntax);
						RandomSystemTestClasses.Add(classToGenerate);
						break;
					case TimeSystemTestMarker:
						classToGenerate = ClassToGenerate
						   .FromClassDeclarationSyntax(classDeclarationSyntax);
						TimeSystemTestClasses.Add(classToGenerate);
						break;
				}
			}
		}

		#endregion
	}
}